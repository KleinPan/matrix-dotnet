namespace matrix_dotnet;

using Refit;

/// <summary>
/// The IMatrixApi interface represents API endpoints directly and its implementation gets generated by Refit.
/// </summary>
public interface IMatrixApi {
	public record ErrorResponse(string errcode, string error, bool? soft_logout = null);

	public abstract record Identifier(string Type, string? User = null, string? Country = null, string? Phone = null, string? Medium = null, string? Address = null);
	public record UserIdentifier(string user) : Identifier("m.id.user", User: user);
	public record PhoneIdentifier(string country, string phone) : Identifier("m.id.phone", Country: country, Phone: phone);
	public record ThirdpartyIdentifier(string medium, string address) : Identifier("m.id.thirdparty", Medium: medium, Address: address);

	/// <summary>The return value of the <see cref="Login"/> function.</summary>
	public record LoginResponse(
		string access_token,
		string device_id,
		int? expires_in_ms,
		// string? HomeServer, // DEPRECATED
		string? refresh_token,
		// object WellKnown, // NOT IMPLEMENTED
		string user_id
	);

	/// <summary><see cref="Login"/></summary>
	public abstract record LoginRequest(
		string type,
		Identifier? identifier,
		string? password,
		string? token,
		string? initial_device_display_name = null,
		string? device_id = null,
		bool refresh_token = true
	);

	/// <summary><see cref="Login"/></summary>
	public record PasswordLoginRequest(
			Identifier identifier,
			string password,
			string? initial_device_display_name = null,
			string? device_id = null,
			bool refresh_token = true
	) : LoginRequest("m.login.password", identifier, password, null, initial_device_display_name, device_id, refresh_token);

	/// <summary><see cref="Login"/></summary>
	public record TokenLoginRequest(
			string token,
			string? initial_device_display_name = null,
			string? device_id = null,
			bool refresh_token = true
	) : LoginRequest("m.login.token", null, null, token, initial_device_display_name, device_id, refresh_token);

	/// <summary> Perform login to receive an access and an optional refresh token.
	/// <see href="https://spec.matrix.org/v1.11/client-server-api/#post_matrixclientv3login"/>
	/// </summary>
	[Post("/login")]
	public Task<LoginResponse> Login(LoginRequest request);

	/// <summary><see cref="Refresh"/></summary>
	public record RefreshRequest(string refresh_token);
	/// <summary><see cref="Refresh"/></summary>
	public record RefreshResponse(string access_token, int? expires_in_ms, string? refresh_token);

	/// <summary> Use a refresh token to reaquire a new access token </summary>
	[Post("/refresh")]
	public Task<RefreshResponse> Refresh(RefreshRequest request);

	/// <summary><see cref="GetJoinedRooms"/></summary>
	public record JoinedRoomsResponse(string[] joined_rooms);

	/// <summary> Get a list of IDs of currently joined rooms. </summary>
	[Get("/joined_rooms")]
	[Headers("Authorization: Bearer")]
	public Task<JoinedRoomsResponse> GetJoinedRooms();

	/// <summary>Represents a room event</summary>
	public abstract record Event();

	/// <summary> Represents any <c>m.room.message</c> event. </summary>
	public abstract record Message(string body, string msgtype) : Event();
	/// <summary> Represents a basic <c>msgtype: m.text</c> message. </summary>
	public record TextMessage(string body) : Message(body: body, msgtype: "m.text");

	/// <summary><see cref="SendEvent"/></summary>
	public record SendEventResponse(string event_id);

	/// <summary>Send a raw event to a room. Can be of any type.</summary>
	/// <returns> The <c>event_id</c> of the sent event </returns>
	/// <param name="body">See <see cref="Event"/></param>
	[Put("/rooms/{roomId}/send/{eventType}/{txnId}")]
	[Headers("Authorization: Bearer")]
	public Task<SendEventResponse> SendEvent<TEvent>(string roomId, string eventType, string txnId, TEvent body) where TEvent : Event;
}

